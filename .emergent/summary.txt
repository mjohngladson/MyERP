<analysis>
The AI engineer successfully addressed a series of critical issues and feature requests for the GiLi ERP application. Initially, it resolved frontend login instability due to a hardcoded backend URL, automating the fix. It performed system cleanups and corrected a major Balance Sheet discrepancy by properly including Net Profit/Loss. Subsequently, the engineer focused on financial transaction integrity and usability. This involved implementing validations to prevent Debit Notes from exceeding Purchase Invoice amounts and restricting line item quantities to integers across multiple document types. A critical fix for cumulative over-credit tracking for draft Debit/Credit Notes was also applied. Further, the engineer removed automatic payment entry creation for Debit and Credit Notes, ensuring manual allocation. It then fixed multiple frontend and backend issues preventing customer and invoice data from populating correctly in Credit Note and Payment Allocation forms, culminating in a critical data migration script to ensure consistent UUIDs for customer IDs across all financial documents, and filtering zero-amount invoices. The final major implementation was adding validation to prevent Credit/Debit Notes from being created against fully paid invoices or exceeding remaining limits for partially paid ones.
</analysis>

<product_requirements>
The GiLi ERP project is an MVP retail clone using React, FastAPI, and MongoDB, with an Electron PoS, designed for comprehensive financial modules including multi-currency and Indian tax compliance, alongside CRUD for sales/purchase documents and stock management. User requirements have driven the following developments and fixes:
1.  **Payment-Invoice Allocation**: Implement features to link payments to invoices, including displaying correct sales invoices.
2.  **Bank Reconciliation**: Develop functionalities for bank statement reconciliation.
3.  **Credit Note (CN) & Debit Note (DN) Enhancements**:
    *   Make invoice selection optional, auto-fetch customer/supplier.
    *   Adjust AR/AP, handle fully paid invoices, maintain audit trails.
    *   Reject over-credit, implement cumulative tracking (for draft and submitted).
    *   Ensure payment allocation reversal.
    *   **Crucially, DNs and CNs should NOT create payment entries automatically (even when submitted); payment entries will be created manually.**
    *   Prevent DNs from exceeding Purchase Invoice amounts (even in draft status).
    *   Prevent CNs from exceeding Sales Invoice amounts (even in draft status).
    *   **CNs/DNs should not be created if an invoice is fully paid, and should not exceed the remaining limit for partially paid invoices.**
4.  **Financial Reporting Accuracy**: Correct Journal Entry logic for Purchase Invoices, ensure accurate Trial Balance, and refine the Profit & Loss statement to display Net Purchases and correctly exclude tax accounts. Ensure Balance Sheet correctly includes Net Profit/Loss.
5.  **Environment Stability**: Address and automate fixes for issues like frontend login failures after forking, caused by incorrect backend URL configuration.
6.  **Data Integrity**:
    *   Restrict line item quantities to integers across all relevant documents (DNs, CNs, Sales/Purchase Invoices).
    *   Ensure consistent ID format (UUID) for customer/supplier IDs in all financial documents and prevent new documents from using MongoDB ObjectIDs.
    *   Invoice with zero total amount should not be shown for payment allocation.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture**: React (Frontend), FastAPI (Backend), MongoDB (Database).
-   **Deployment & Environment**: Supervisor, Kubernetes (Ingress), Shell Scripting.
-   **Accounting Principles**: Journal Entries, Trial Balance, Profit & Loss, Balance Sheet, Debit/Credit Notes, Payment Allocation.
-   **Data Management**: UUIDs vs. MongoDB ObjectIDs, data migration for ID consistency.
-   **Frontend Interaction**: API calls, dropdown population, form handling, error messages.
-   **Data Validation**: Input validation for financial transactions, quantity restrictions, amount checks.
</key_technical_concepts>

<code_architecture>
The application utilizes a monorepo structure with  (FastAPI, Python) and  (React.js, JavaScript), using MongoDB as the database.



-   :
    -   **Importance**: Handles financial reports.
    -   **Changes Made**: Fixed Balance Sheet calculation to include Net Profit/Loss in Equity.
-   :
    -   **Importance**: Manages Debit Note creation and accounting.
    -   **Changes Made**: Added pre-creation validation to prevent DNs exceeding Purchase Invoice amounts (draft & submitted), restricted line item quantities to integers. **Modified  to no longer create automatic payment entries.** Implemented validation to prevent DN creation if the associated Purchase Invoice is fully paid or if the DN amount exceeds the remaining open balance.
-   :
    -   **Importance**: Contains helper functions for Credit Note and Debit Note validations, including over-credit checks.
    -   **Changes Made**: Modified over-credit validation logic to be invoked earlier and handle cumulative tracking for draft DNs/CNs. **Crucially, modified  and  functions to remove automatic payment/refund entry creation, ensuring these are now manual.**
-   :
    -   **Importance**: Manages Credit Note creation and accounting.
    -   **Changes Made**: Added pre-creation validation for CNs against Sales Invoice amounts and restricted line item quantities to integers. **Implemented validation to prevent CN creation if the associated Sales Invoice is fully paid or if the CN amount exceeds the remaining open balance.**
-   :
    -   **Importance**: Handles sales invoice creation.
    -   **Changes Made**: Added validation to restrict line item quantities to integers. **Implemented a fix to ensure  is always explicitly set as a UUID during invoice creation, preventing MongoDB ObjectId inconsistencies.**
-   :
    -   **Importance**: Frontend component for creating Credit Notes.
    -   **Changes Made**: Corrected the API endpoint for loading sales invoices from  to . Enhanced response parsing for customer and invoice data.
-   :
    -   **Importance**: Frontend component for allocating payments to invoices.
    -   **Changes Made**: Added a filter to exclude invoices with a  of 0 from the allocation dropdown.
-    (NEW):
    -   **Importance**: Script to migrate existing MongoDB ObjectIds for  /  in invoices, debit notes, and credit notes to UUID format to ensure data consistency.
    -   **Changes Made**: Created and refined to target specific collections (, , ) and use the correct  database.
-   :
    -   **Importance**: Documents testing progress and communication.
    -   **Changes Made**: Continuously updated to reflect all fixes, validations, and cleanup actions, including a protocol for test data removal.
</code_architecture>

<pending_tasks>
-   Comprehensive verification of the corrected Profit & Loss statement, as it was only initially verified.
-   User to verify the Credit Note and Debit Note functionality with new validations regarding payment allocations.
</pending_tasks>

<current_work>
Immediately prior to this summary, the AI engineer was addressing data consistency issues related to invoice population in the Payment Allocation Form and implementing critical business logic for Credit and Debit Notes.

The primary issue identified was a **customer ID format mismatch**, where invoices were created with MongoDB ObjectIds while payments and customer master records used UUIDs. This prevented invoices from appearing in the Payment Allocation form.
1.  **UUID Migration**: A script  was created and repeatedly executed to update s (and s) in , , and  collections from ObjectIds to UUIDs, targeting the  database. This involved debugging the correct database and collection names.
2.  **Root Cause Fix for New Invoices**: The  file was modified to ensure that new sales invoices always store  as a UUID, preventing future ID mismatches.
3.  **Zero-Amount Invoice Filter**: The  was updated to filter out invoices with a  of 0, as per user request.
4.  **CN/DN Validation against Payments**: New validations were implemented in  and . These validations prevent:
    *   Creating a Credit Note or Debit Note if the associated Sales/Purchase Invoice is already fully paid.
    *   Creating a Credit Note or Debit Note that would exceed the remaining open balance of a partially paid invoice.

All these changes were tested via backend and frontend testing agents, and the  was updated. The last reported task was the successful implementation and verification of the CN/DN payment allocation validation.
</current_work>

<optional_next_step>
Verify the Credit Note and Debit Note functionality with the newly implemented payment allocation validations.
</optional_next_step>

